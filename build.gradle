/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */
 
 buildscript {
 	repositories {
 		mavenCentral()
 	}
 	
 	dependencies {
 		classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.4.0'
 	}
 }

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'info.solidsoft.pitest'
apply plugin: 'jacoco'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

pitest {
	targetClasses = ['Containers.*', 'Displays.*', 'Enums.*', 'PreRenderTasks.*', 'Program.*', 'Readers.*', 'Utilities.*', 'Wrappers.*']
	pitestVersion = '1.4.3'
	threads = 4
	outputFormats = ['HTML']
	timestampedReports = false
}

jacoco {
	toolVersion = "0.8.3"
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)

    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

task codeCoverageInfo (dependsOn: jacocoTestReport) {
    ext.srcFile = file("${reportsDir}/jacoco/test/jacocoTestReport.xml")
    doLast {
        println "Transforming source file."

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false);
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        parser.setFeature("http://xml.org/sax/features/namespaces", false)

        def reportNode = parser.parse(srcFile)
        reportNode.children().each {
            if(it.name() == 'counter') {
                String type = it.@type
                float missed = it.@missed as float
                float covered = it.@covered as float
                float percentage = covered / (missed + covered) * 100
                println "Code Coverage[$type]: $percentage%"
            }
        }
    }
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'
    //api 'gnu.getopt:java-getopt:1.0.13'
    //api 'org.ow2.asm/asm-tree/5.0.4'
    //api 'org.ow2.asm:asm:5.0.3'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.+'
    
    testCompile "org.mockito:mockito-core:2.+"
    
    // https://mvnrepository.com/artifact/gnu.getopt/java-getopt
	compile group: 'gnu.getopt', name: 'java-getopt', version: '1.0.13'
	
	// https://mvnrepository.com/artifact/org.ow2.asm/asm-tree
	compile group: 'org.ow2.asm', name: 'asm-tree', version: '5.0.4'
}
